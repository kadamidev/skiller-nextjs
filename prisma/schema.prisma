// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique
  email     String?    @unique
  password  String
  avatar    String?
  Tab       Tab[]
  Card      Card[]
  items     CardItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime?   @updatedAt
}

model Tab {
  id        Int      @id @default(autoincrement())
  user_id   Int
  name      String
  User      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Card      Card[]
  createdAt DateTime @default(now())
  updatedAt DateTime?   @updatedAt



  @@unique(fields: [id, user_id], name: "authTab")
}

model Card {
  id        Int        @id @default(autoincrement())
  tab_id    Int
  user_id   Int
  header    String
  collapsed Boolean?   @default(false)
  Tab       Tab        @relation(fields: [tab_id], references: [id], onDelete: Cascade)
  User      User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  items     CardItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime?   @updatedAt


  @@unique(fields: [id, user_id], name: "authCard")
}

model CardItem {
  id        Int      @id @default(autoincrement())
  card_id   Int
  user_id   Int
  checked   Boolean? @default(false)
  text      String
  Card      Card     @relation(fields: [card_id], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime?   @updatedAt


  @@unique(fields: [id, user_id], name: "authItem")
}
